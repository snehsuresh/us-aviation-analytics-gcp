CREATE OR REPLACE TABLE `aviation-analysis.us_aviation.nonstop_route_merged_2024` AS
WITH

-- Add ROUTE_KEY to DB1B
db1b_with_key AS (
  SELECT
    *,
    ARRAY(SELECT x FROM UNNEST([STRUCT(ORIGIN_CITY_MARKET_ID AS id), STRUCT(DEST_CITY_MARKET_ID AS id)]) ORDER BY id)[OFFSET(0)].id AS id1,
    ARRAY(SELECT x FROM UNNEST([STRUCT(ORIGIN_CITY_MARKET_ID AS id), STRUCT(DEST_CITY_MARKET_ID AS id)]) ORDER BY id)[OFFSET(1)].id AS id2,
    CONCAT(CAST(LEAST(ORIGIN_CITY_MARKET_ID, DEST_CITY_MARKET_ID) AS STRING), '-', CAST(GREATEST(ORIGIN_CITY_MARKET_ID, DEST_CITY_MARKET_ID) AS STRING)) AS ROUTE_KEY,
    OPERATING_CARRIER AS CARRIER
  FROM `aviation-analysis.us_aviation.db1b_table`
  WHERE YEAR = 2024
),

-- Add ROUTE_KEY to T100
t100_with_key AS (
  SELECT
    *,
    CONCAT(CAST(LEAST(ORIGIN_CITY_MARKET_ID, DEST_CITY_MARKET_ID) AS STRING), '-', CAST(GREATEST(ORIGIN_CITY_MARKET_ID, DEST_CITY_MARKET_ID) AS STRING)) AS ROUTE_KEY,
    UNIQUE_CARRIER AS CARRIER
  FROM `aviation-analysis.us_aviation.t100_table`
  WHERE YEAR = 2024
),

-- Get nonstop routes
nonstop_routes AS (
  SELECT DISTINCT ROUTE_KEY FROM t100_with_key
),

-- Filter DB1B to only nonstop
db1b_nonstop AS (
  SELECT * FROM db1b_with_key
  WHERE ROUTE_KEY IN (SELECT ROUTE_KEY FROM nonstop_routes)
),

-- Aggregate DB1B
db1b_agg AS (
  SELECT
    YEAR,
    QUARTER,
    ROUTE_KEY,
    SUM(PASSENGERS) AS DB1B_PASSENGERS,
    AVG(MARKET_FARE) AS MARKET_FARE,
    SUM(MARKET_FARE * PASSENGERS) AS FARE_WEIGHTED
  FROM db1b_nonstop
  GROUP BY YEAR, QUARTER, ROUTE_KEY
),

db1b_final AS (
  SELECT *,
    SAFE_DIVIDE(FARE_WEIGHTED, DB1B_PASSENGERS) AS MARKET_FARE_WEIGHTED
  FROM db1b_agg
),

-- Aggregate T-100
t100_agg AS (
  SELECT
    YEAR,
    QUARTER,
    ROUTE_KEY,
    CARRIER,
    SUM(SEATS) AS T100_SEATS,
    SUM(PASSENGERS) AS T100_PASSENGERS,
    SUM(FREIGHT) AS T100_FREIGHT,
    ROUND(AVG(DISTANCE)) AS T100_DISTANCE,
    FIRST_VALUE(ORIGIN) OVER w AS ORIGIN,
    FIRST_VALUE(DEST) OVER w AS DEST,
    FIRST_VALUE(REGION) OVER w AS REGION,
    FIRST_VALUE(CARRIER_GROUP) OVER w AS CARRIER_GROUP,
    FIRST_VALUE(CARRIER_NAME) OVER w AS CARRIER_NAME,
    FIRST_VALUE(AIRLINE_ID) OVER w AS AIRLINE_ID,
    FIRST_VALUE(DISTANCE_GROUP) OVER w AS DISTANCE_GROUP,
    FIRST_VALUE(CLASS) OVER w AS CLASS,
    FIRST_VALUE(ORIGIN_STATE_ABR) OVER w AS ORIGIN_STATE,
    FIRST_VALUE(DEST_STATE_ABR) OVER w AS DEST_STATE,
    FIRST_VALUE(ORIGIN_CITY_NAME) OVER w AS ORIGIN_CITY_NAME,
    FIRST_VALUE(DEST_CITY_NAME) OVER w AS DEST_CITY_NAME,
    FIRST_VALUE(AIRCRAFT_GROUP) OVER w AS AIRCRAFT_GROUP,
    FIRST_VALUE(AIRCRAFT_TYPE) OVER w AS AIRCRAFT_TYPE,
    FIRST_VALUE(AIRCRAFT_CONFIG) OVER w AS AIRCRAFT_CONFIG
  FROM t100_with_key
  WINDOW w AS (PARTITION BY YEAR, QUARTER, ROUTE_KEY, CARRIER)
  GROUP BY YEAR, QUARTER, ROUTE_KEY, CARRIER
),

-- Join
final_merge AS (
  SELECT
    t.*,
    d.DB1B_PASSENGERS,
    d.MARKET_FARE,
    d.MARKET_FARE_WEIGHTED,
    SAFE_DIVIDE(t.T100_PASSENGERS, t.T100_SEATS) AS LOAD_FACTOR
  FROM t100_agg t
  LEFT JOIN db1b_final d
  ON t.YEAR = d.YEAR AND t.QUARTER = d.QUARTER AND t.ROUTE_KEY = d.ROUTE_KEY
)

SELECT * FROM final_merge;
